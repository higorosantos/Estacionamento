#include "pilha.h"

struct _pilha {

    Carro **arr;
    //NUMERO DE ELEMENTO NA PILHA
    int n;
    //TAMANHO MAXIMO DE ELEMENTOS NA PILHA
    int tam;

};


//Recebe como parametro o tamanho max de carro da fileira
Pilha* pilha_cria(int tam){
    Pilha *pilha = (Pilha*)calloc(1, sizeof(Pilha));

    if(pilha == NULL){
        return NULL;
    }
    pilha->arr= (Carro**)calloc(tam, sizeof(Carro*));
    if(pilha->arr == NULL){
        free(pilha);
        return NULL;
    }
    pilha->n = 0;
    pilha->tam = tam;

    return pilha;
}

int pilha_push(Pilha *pilha, Carro *carro){

    if(pilha->n == pilha->tam){
        return 0;
    }
    if(carro == NULL){
        return -1;
    }
    pilha->arr[pilha->n] = carro;
    pilha->n++;

    return 1;
}

Carro* pilha_pop(Pilha *pilha){
    Carro *aux = NULL;
    
    if(pilha->n == 0){
        return NULL;
    }
    pilha->n--;
    aux = pilha->arr[pilha->n];
    pilha->arr[pilha->n] = NULL;

    return aux;
}

int pilha_vazia(Pilha *pilha){
    if(pilha->n == 0){
        return 1;
    }
    return 0;
}

int pilha_cheia(Pilha *pilha){
    if(pilha->n == pilha->tam){
        return 1;
    }
    return -1;
}

int getQtdCarros(Pilha *pilha){
    return pilha->n;
}

//RETORNA A PREVISÃO DE SAIDA DO CARRO DO TOPO DA PILHA
int pilha_saida_topo(Pilha *p){
    return getPrevisaoRetirada(p->arr[p->n - 1]);
}

int pilha_tam_max(Pilha *pilha){
    return pilha->tam;
}

//PROCURA O CARRO PELA PLACA VERIFICANDO SE ELA ESTA NESSA FILEIRA RETORNADO 1 SE SIM E -1 SE NÃO
int busca_carro(Pilha *p, char placa[TAM_PLACA]){


    for(int i = 0; i < p->n; i++){
        if(strcmp(placa, getPlaca(p->arr[i])) == 0){
            return 1;
        }
    }
    return -1;
}

void imprime_espaco(Pilha *p){
    for(int i = p->tam-1; i >= 0; i--){
        printf(" |                 ");
    }
    printf(" |\n");
}

void imprime_carro(Pilha *p){
    for(int i = p->tam-1; i >= 0; i--){
        printf(" | ");
            if(getPlaca(p->arr[i]) == NULL){
                printf("                ");
            } else if (getPrevisaoRetirada(p->arr[i]) == -1){
                mudar_cor(10);
                printf("   ESTACIONE   ");
                mudar_cor(3);
            } else {
                printf("    Carro %.2d    ",i + 1 );
            }
    }
    printf(" |\n");
}

void imprime_placa(Pilha *p){
    for(int i = p->tam-1; i >= 0; i--){
        printf(" | ");
            if(getPlaca(p->arr[i]) == NULL){
                printf("   VAGA VAZIA   ");
            } else if (getPrevisaoRetirada(p->arr[i]) == -1){
                mudar_cor(10);
                printf("   SEU CARRO   ");
                mudar_cor(3);
            } else {
                printf(" placa: %s ",getPlaca(p->arr[i]));
            }
    }
    printf(" |\n");
}

void imprime_tempo(Pilha *p){
    for(int i = p->tam-1; i >= 0; i--){
        printf(" | ");
            if(getPlaca(p->arr[i]) == NULL){
                printf("                ");
            } else if (getPrevisaoRetirada(p->arr[i]) == -1){
                mudar_cor(10);
                printf("   NESSA VAGA  ");
                mudar_cor(3);
            } else {
                printf("   tempo: %.2dhs  ",getPrevisaoRetirada(p->arr[i]));
            }
    }
    printf(" |\n");
}


